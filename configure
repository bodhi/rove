#!/bin/bash

# This file is part of rove.
# rove is copyright 2007, 2008 william light <visinin@gmail.com>
#
# rove is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rove is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rove.  If not, see <http://www.gnu.org/licenses/>.

ROVE_VERSION="0.2";
PREFIX="/usr";
CFLAGS="-I/opt/local/include -I../../rubberband";
LDFLAGS="-L/opt/local/lib -L../../rubberband/lib -lrubberband";

CC="gcc";
CC_VERSION=;
PKGCONFIG_VERSION=;

HAVE_MONOME=;
MONOME_VERSION=;
#MONOME_CFLAGS="-I/Users/bodhi/Code/github-repos/libmonome/public";
MONOME_CFLAGS="";
#MONOME_LIBS="-lmonome -L/Users/bodhi/Code/github-repos/libmonome/src";
MONOME_LIBS="-lmonome";

HAVE_JACK=;
JACK_VERSION=;
JACK_CFLAGS="-I/opt/local/include";
JACK_LIBS="-ljack -lpthread -L/opt/local/lib";

HAVE_SNDFILE=;
SNDFILE_VERSION=;
SNDFILE_CFLAGS="-I/opt/local/include";
SNDFILE_LIBS="-lsndfile -L/opt/local/lib";

HAVE_SRC=;
SRC_VERSION=;
SRC_CFLAGS="-DHAVE_SRC -I/opt/local/include";
SRC_LIBS="-lsamplerate -L/opt/local/lib";

#
# functions
#

# figure out the right things to pass to echo to supress a newline
if [ "`echo -n`" = "-n" ]; then
	n=""; c="\c";
else
	n="-n"; c="";
fi

_echo () {
	# portable (sysv/bsd) echo -n
	if [ $1 = "-n" ]; then
		shift;
		echo $n "$*" $c;
	else
		echo "$*";
	fi
}

echo_n () {
	_echo -n "$*";
}

# color and text styles

att() {
	if [ $# -eq 0 ]; then
		echo -ne "\033[0m";
		return 0;
	fi

	echo -ne "\033["
	while [ $# -ge 1 ]; do
		case $1 in
			bold)      C=1;;
			underline) C=4;;
			hidden)    C=8;;

			black)     C=30;;
			red)       C=31;;
			green)     C=32;;
			yellow)    C=33;;
			blue)      C=34;;
			magenta)   C=35;;
			cyan)      C=36;;
			white)     C=37;;

			reset)
				echo -ne "0m";
				return 0;
		esac

		echo -ne "$C"

		if [ $# -ge 2 ]; then
			echo -ne ";";
		fi

		shift;
	done;
	echo -ne "m";
}

style_package () { att blue bold; _echo $*; att; }
style_success () { att green; _echo $*; att; }
style_distro  () { att cyan; _echo $*; att; }
style_error   () { att red bold; _echo $*; att; }
style_link    () { att blue bold underline; _echo $*; att; }

cleanup () {
	rmdir .conftests
}

# feature test commands

try_command () {
	if $* > /dev/null 2> /dev/null; then
		return 0;
	else
		return 1;
	fi
}

compile_and_run() {
	FILE=$1
	shift;

	CMD="$CC $* .conftests/$FILE.c -o .conftests/$FILE"
	try_command $CMD;

	if [ $? -ne 0 ]; then
		rm -f .conftests/$FILE.c;
		rm -f .conftests/$FILE;

		return 1;
	fi

	CMD="./.conftests/$1";
	try_command $CMD;

	rm -f .conftests/$FILE.c;
	rm -f .conftests/$FILE;

	if [ $? -ne 0 ]; then
		return 2;
	fi

	return 0;
}

check_pkgconfig () {
	CMD="pkg-config --version";

	if try_command $CMD; then
		PKGCONFIG_VERSION=`$CMD`;
	fi
}

check_gcc () {
	CMD="$CC -dumpversion";
	try_command $CMD;

	if [ $? -eq 0 ]; then
		CC_VERSION=`$CMD`;
		return 0;
	fi

	CC_VERSION=;
	return 1;
}

check_jack () {
	cat <<EOF > .conftests/jack.c
#include <jack/jack.h>

int main(int argc, char **argv) {
	if( jack_client_name_size() )
		return 0;
	else
		return 1;
}
EOF

	compile_and_run jack $JACK_CFLAGS $JACK_LIBS;
	RET=$?;

	if [ $RET -ne 0 ]; then
		return $RET;
	fi

	HAVE_JACK=1;
	JACK_VERSION="`jackd -V | awk '{print $3}' 2> /dev/null`";

	if [ $? -ne 0 ]; then
		JACK_VERSION=;
	fi

	return 0;
}

check_monome () {
	cat <<EOF > .conftests/monome.c
#include <monome.h>

int main(int argc, char **argv) {
	monome_t *monome;

	if( !(monome = monome_open("osc.udp://127.0.0.1:42424/monome", "osc", "56565")) )
		return 1;

	monome_close(monome);

	return 0;
}
EOF

	compile_and_run monome $MONOME_CFLAGS $MONOME_LIBS;
	RET=$?;

	if [ $RET -ne 0 ]; then
		return $RET;
	fi

	HAVE_MONOME=1;

	if [ $PKGCONFIG_VERSION ]; then
		CMD="pkg-config --modversion libmonome"
		try_command $CMD;

		if [ $? -ne 0 ]; then
			return 0;
		fi

		MONOME_VERSION=`$CMD`;
	fi

	return 0;
}

check_sndfile () {
	cat <<EOF > .conftests/sndfile.c
#include <sndfile.h>

int main(int argc, char **argv) {
	SF_INFO info;

	info.samplerate = 44100;
	info.format     = SF_FORMAT_WAV | SF_FORMAT_PCM_16;
	info.channels   = 1;
	info.frames     = 0;

	if( sf_format_check(&info) )
		return 0;
	else
		return 1;
}
EOF

	compile_and_run sndfile $SNDFILE_CFLAGS $SNDFILE_LIBS;
	RET=$?;

	if [ $RET -ne 0 ]; then
		return $RET;
	fi

	HAVE_SNDFILE=1;

	if [ $PKGCONFIG_VERSION ]; then
		CMD="pkg-config --modversion sndfile"
		try_command $CMD;

		if [ $? -ne 0 ]; then
			return 0;
		fi

		SNDFILE_VERSION=`$CMD`;
	fi

	return 0;
}

check_src () {
	cat <<EOF > .conftests/src.c
#include <samplerate.h>

int main(int argc, char **argv) {
	SRC_STATE *s;
	int i;

	if( !(s = src_new(SRC_SINC_FASTEST, 1, &i)) )
		return 1;

	src_delete(s);
	return 0;
}
EOF

	compile_and_run src $SRC_CFLAGS $SRC_LIBS;
	RET=$?

	if [ $RET -ne 0 ]; then
		SRC_CFLAGS=;
		SRC_LIBS=;

		return 1;
		return $RET;
	fi

	HAVE_SRC=1;

	if [ $PKGCONFIG_VERSION ]; then
		CMD="pkg-config --modversion samplerate"
		try_command $CMD;

		if [ $? -ne 0 ]; then
			return 0;
		fi

		SRC_VERSION=`$CMD`;
	fi

	return 0;
}

#
# actual script part starts here
#

mkdir -p .conftests
check_pkgconfig;

# TODO: command-line parameters (prefix, etc)

echo "";
att bold;
echo_n "  configuring "; style_package -n "rove"; att; att bold; echo " ${ROVE_VERSION}:";
att;
echo_n "    checking for gcc:             ";
if check_gcc; then
	style_success "found gcc $CC_VERSION";
else
	style_error "no gcc :(";

	echo   "";
	echo   "  I couldn't find gcc on your system!  you will need it to compile rove.";
	echo_n "  if you're on "; style_distro -n "ubuntu"; echo_n ", make sure to grab the "; style_package -n "build-essential"; echo " package.";
	echo   "  on mac os X, you'll need to install the Xcode developer tools.";
	echo   "";

	cleanup;
	exit 1;
fi

echo_n "    checking for JACK:            ";
if check_jack; then
	style_success "found JACK $JACK_VERSION";
else
	style_error "no jack :(";

	echo   "";
	echo   "  I couldn't find JACK on your system!  you will need it to compile rove.";
	echo_n "  if you're on "; style_distro -n "ubuntu"; echo_n ", make sure you have the "; style_package -n "libjack-dev"; echo_n " and "; style_package -n "jackd"; echo " packages.";
	echo_n "  on "; style_distro -n "other distros"; echo_n ", the package might be called "; style_package -n "jack-audio-connection-kit"; echo ".";
	echo_n "  failing that, grab the source from "; style_link -n "http://jackaudio.org"; echo ".";
	echo   "";
	echo_n "  "; style_distro -n "mac os X"; echo_n " users should head to "; style_link -n "http://jackosx.com/"; echo ".";
	echo   "";

	cleanup;
	exit 1;
fi

echo_n "    checking for libmonome:       ";
if check_monome; then
	style_success "found libmonome $MONOME_VERSION";
else
	style_error "no libmonome :(";

	echo "";
	echo "  I couldn't find libmonome on your system!  you will need it to compile rove.";
	echo_n "  The latest version of libmonome can be found at "; style_link -n "http://github.com/wrl/libmonome/archives/master"; echo ".";
	echo "";
fi

echo_n "    checking for libsndfile:      ";
if check_sndfile; then
	style_success "found libsndfile $SNDFILE_VERSION";
else
	style_error "no libsndfile :(";
	echo   "";
	echo   "  I couldn't find libsndfile on your system!  you will need it to compile rove."
	echo_n "  if you're on "; style_distro -n "ubuntu"; echo_n ", make sure you have the "; style_package -n "libsndfile1-dev"; echo " package installed.";
	echo_n "  users of "; style_distro -n "other distros"; echo_n " and "; style_distro -n "mac os X"; echo_n " should look for a "; style_package -n "libsndfile"; echo " package, or";
	echo_n "  get the source from the libsndfile homepage at "; style_link -n "http://mega-nerd.com/libsndfile/"; echo ".";
	echo "";
	exit 1;
fi

echo_n "    checking for libsamplerate:   ";
if check_src; then
	style_success "found libsamplerate $SNDFILE_VERSION";
else
	echo   "no libsamplerate";
	echo   "";
	echo   "  I couldn't find libsamplerate on your system!"
	echo_n "  you don't "; att bold; echo_n "need"; att; echo " it to compile rove, but you will not be able to change the speed of loops without it."
	echo   ""
	echo_n "  if you're on "; style_distro -n "ubuntu"; echo_n ", make sure you have the "; style_package -n "libsamplerate0-dev"; echo " package installed.";
	echo_n "  users of "; style_distro -n "other distros"; echo_n " and "; style_distro -n "mac os X"; echo_n " should look for a "; style_package -n "libsamplerate"; echo " package, or";
	echo_n "  get the source from the libsamplerate homepage at "; style_link -n "http://mega-nerd.com/SRC/"; echo ".";
	echo "";
fi

cat <<EOF > config.mk
export VERSION = $ROVE_VERSION
export PREFIX  = $PREFIX

export CC      = $CC
export CFLAGS  = $CFLAGS
export LDFLAGS = $LDFLAGS

export MONOME_CFLAGS = $MONOME_CFLAGS
export MONOME_LIBS   = $MONOME_LIBS

export JACK_CFLAGS = $JACK_CFLAGS
export JACK_LIBS   = $JACK_LIBS

export SNDFILE_CFLAGS = $SNDFILE_CFLAGS
export SNDFILE_LIBS   = $SNDFILE_LIBS

export SRC_CFLAGS = $SRC_CFLAGS
export SRC_LIBS   = $SRC_LIBS
EOF

echo "";
echo_n "  run "; style_package -n "make"; echo " to compile rove.";
echo "";

cleanup;
exit 0;
